rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData() {
      return isAuthenticated() ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data :
        null;
    }

    function getUserRole() {
      return getUserData() != null ? getUserData().role : null;
    }

    function isAdmin() {
      return getUserRole() == 'admin';
    }

    function isTeacher() {
      return getUserRole() == 'teacher';
    }

    function isFeeManager() {
      return getUserRole() == 'fee_manager';
    }

    function isGatekeeper() {
      return getUserRole() == 'gatekeeper';
    }

    function isTeacherAssignedToClass(classId) {
      return isTeacher() &&
        getUserData().assignedClasses != null &&
        classId in getUserData().assignedClasses;
    }

    function validateStringField(field, maxLength) {
      return field is string && field.size() <= maxLength && field.size() > 0;
    }

    function validateArraySize(arr, maxSize) {
      return arr is list && arr.size() <= maxSize;
    }

    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin() || request.auth.uid == userId);

      allow create: if isAdmin() &&
        validateStringField(request.resource.data.email, 100) &&
        validateStringField(request.resource.data.name, 100) &&
        validateStringField(request.resource.data.role, 50) &&
        request.resource.data.role in ['admin', 'teacher', 'fee_manager', 'gatekeeper', 'staff'] &&
        request.resource.data.status in ['active', 'inactive'] &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'status', 'created_at']));

      allow delete: if isAdmin();
    }

    match /students/{studentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isTeacherAssignedToClass(resource.data.class_id) ||
        isFeeManager()
      );

      allow create: if isAdmin() &&
        validateStringField(request.resource.data.admission_id, 50) &&
        validateStringField(request.resource.data.first_name, 100) &&
        validateStringField(request.resource.data.last_name, 100) &&
        request.resource.data.gender in ['male', 'female', 'other'] &&
        request.resource.data.status in ['active', 'inactive', 'graduated', 'transferred', 'withdrawn'] &&
        request.resource.data.date_of_birth is string &&
        request.resource.data.admission_date is string &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin() ||
        (isTeacher() && isTeacherAssignedToClass(resource.data.class_id) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'updated_at', 'roll_number', 'section'
         ]));

      allow delete: if isAdmin();
    }

    match /guardians/{guardianId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isTeacher() && exists(/databases/$(database)/documents/students/$(resource.data.student_id)) &&
         isTeacherAssignedToClass(get(/databases/$(database)/documents/students/$(resource.data.student_id)).data.class_id))
      );

      allow create: if isAdmin() &&
        validateStringField(request.resource.data.student_id, 100) &&
        validateStringField(request.resource.data.name, 100) &&
        validateStringField(request.resource.data.relation, 50) &&
        validateStringField(request.resource.data.phone, 20) &&
        request.resource.data.is_primary is bool &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /teachers/{teacherId} {
      allow read: if isAuthenticated();

      allow create: if isAdmin() &&
        validateStringField(request.resource.data.staff_id, 50) &&
        validateStringField(request.resource.data.first_name, 100) &&
        validateStringField(request.resource.data.last_name, 100) &&
        validateStringField(request.resource.data.email, 100) &&
        request.resource.data.gender in ['male', 'female', 'other'] &&
        request.resource.data.status in ['active', 'inactive', 'on_leave', 'terminated'] &&
        validateArraySize(request.resource.data.subjects, 20) &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == teacherId &&
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['staff_id', 'status', 'created_at']));

      allow delete: if isAdmin();
    }

    match /classes/{classId} {
      allow read: if isAuthenticated();

      allow create, update: if isAdmin() &&
        validateStringField(request.resource.data.name, 50) &&
        validateStringField(request.resource.data.section, 10) &&
        validateStringField(request.resource.data.academic_year, 20) &&
        request.resource.data.capacity is int &&
        request.resource.data.capacity > 0 &&
        request.resource.data.capacity <= 200 &&
        validateArraySize(request.resource.data.subjects, 30);

      allow delete: if isAdmin();
    }

    match /attendance/{attendanceId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isTeacherAssignedToClass(resource.data.class_id)
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        isTeacherAssignedToClass(request.resource.data.class_id)
      ) &&
        validateStringField(request.resource.data.student_id, 100) &&
        validateStringField(request.resource.data.class_id, 100) &&
        validateStringField(request.resource.data.date, 20) &&
        request.resource.data.status in ['present', 'absent', 'late', 'excused', 'P', 'A', 'L', 'E'] &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin() ||
        (isTeacher() && isTeacherAssignedToClass(resource.data.class_id));

      allow delete: if isAdmin();
    }

    match /fee_structures/{feeStructureId} {
      allow read: if isAuthenticated();

      allow create, update: if isAdmin() &&
        validateStringField(request.resource.data.name, 100) &&
        validateArraySize(request.resource.data.items, 50) &&
        request.resource.data.total_amount is number &&
        request.resource.data.total_amount >= 0 &&
        request.resource.data.frequency in ['monthly', 'quarterly', 'yearly', 'one_time'] &&
        validateArraySize(request.resource.data.applicable_classes, 100);

      allow delete: if isAdmin();
    }

    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isFeeManager() ||
        (isTeacher() && exists(/databases/$(database)/documents/students/$(resource.data.student_id)) &&
         isTeacherAssignedToClass(get(/databases/$(database)/documents/students/$(resource.data.student_id)).data.class_id))
      );

      allow create: if (isAdmin() || isFeeManager()) &&
        validateStringField(request.resource.data.invoice_number, 50) &&
        validateStringField(request.resource.data.student_id, 100) &&
        validateStringField(request.resource.data.academic_year, 20) &&
        validateArraySize(request.resource.data.items, 100) &&
        request.resource.data.subtotal is number &&
        request.resource.data.discount is number &&
        request.resource.data.total_amount is number &&
        request.resource.data.paid_amount is number &&
        request.resource.data.balance is number &&
        request.resource.data.subtotal >= 0 &&
        request.resource.data.discount >= 0 &&
        request.resource.data.total_amount >= 0 &&
        request.resource.data.paid_amount >= 0 &&
        request.resource.data.balance >= 0 &&
        request.resource.data.total_amount == request.resource.data.subtotal - request.resource.data.discount &&
        request.resource.data.balance == request.resource.data.total_amount - request.resource.data.paid_amount &&
        request.resource.data.status in ['draft', 'pending', 'paid', 'partial', 'overdue', 'cancelled'] &&
        request.resource.data.created_at == request.time;

      allow update: if (isAdmin() || isFeeManager()) &&
        request.resource.data.total_amount == request.resource.data.subtotal - request.resource.data.discount &&
        request.resource.data.balance == request.resource.data.total_amount - request.resource.data.paid_amount;

      allow delete: if isAdmin();
    }

    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (isAdmin() || isFeeManager());

      allow create: if (isAdmin() || isFeeManager()) &&
        validateStringField(request.resource.data.invoice_id, 100) &&
        validateStringField(request.resource.data.student_id, 100) &&
        request.resource.data.amount is number &&
        request.resource.data.amount > 0 &&
        validateStringField(request.resource.data.payment_date, 20) &&
        request.resource.data.payment_mode in ['cash', 'card', 'upi', 'cheque', 'bank_transfer', 'online'] &&
        request.resource.data.created_at == request.time &&
        exists(/databases/$(database)/documents/invoices/$(request.resource.data.invoice_id));

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /exams/{examId} {
      allow read: if isAuthenticated();

      allow create, update: if isAdmin() &&
        validateStringField(request.resource.data.name, 100) &&
        validateStringField(request.resource.data.term, 50) &&
        validateStringField(request.resource.data.academic_year, 20) &&
        validateArraySize(request.resource.data.classes, 100) &&
        validateArraySize(request.resource.data.subjects, 50) &&
        request.resource.data.status in ['scheduled', 'ongoing', 'completed', 'cancelled'];

      allow delete: if isAdmin();
    }

    match /marks/{marksId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isTeacherAssignedToClass(resource.data.class_id)
      );

      allow create, update: if isAuthenticated() && (
        isAdmin() ||
        isTeacherAssignedToClass(request.resource.data.class_id)
      ) &&
        validateStringField(request.resource.data.exam_id, 100) &&
        validateStringField(request.resource.data.student_id, 100) &&
        validateStringField(request.resource.data.class_id, 100) &&
        request.resource.data.total_marks is number &&
        request.resource.data.total_marks >= 0 &&
        request.resource.data.percentage is number &&
        request.resource.data.percentage >= 0 &&
        request.resource.data.percentage <= 100;

      allow delete: if isAdmin();
    }

    match /announcements/{announcementId} {
      allow read: if isAuthenticated();

      allow create, update: if isAdmin() &&
        validateStringField(request.resource.data.title, 200) &&
        validateStringField(request.resource.data.body, 5000) &&
        request.resource.data.audience in ['all', 'students', 'teachers', 'parents', 'staff', 'specific_classes'] &&
        validateArraySize(request.resource.data.target_classes, 100) &&
        request.resource.data.priority in ['low', 'medium', 'high', 'urgent'];

      allow delete: if isAdmin();
    }

    match /fileMeta/{fileId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        isTeacher()
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        isTeacher()
      ) &&
        validateStringField(request.resource.data.owner_type, 50) &&
        request.resource.data.owner_type in ['student', 'teacher', 'invoice', 'announcement', 'exam'] &&
        validateStringField(request.resource.data.owner_id, 100) &&
        validateStringField(request.resource.data.file_name, 255) &&
        validateStringField(request.resource.data.file_type, 100) &&
        request.resource.data.file_size is int &&
        request.resource.data.file_size > 0 &&
        request.resource.data.file_size <= 10485760 &&
        request.resource.data.storage_type in ['indexeddb', 'local', 'external'] &&
        request.resource.data.created_at == request.time;

      allow update: if isAdmin();
      allow delete: if isAdmin() ||
        (isAuthenticated() && request.auth.uid == resource.data.uploaded_by);
    }

    match /activityLogs/{logId} {
      allow read: if isAdmin();

      allow create: if false;

      allow update, delete: if false;
    }

    match /analytics/{document=**} {
      allow read: if isAuthenticated() && (isAdmin() || isTeacher());

      allow write: if false;
    }

    match /settings/{settingId} {
      allow read: if isAuthenticated();

      allow create, update: if isAdmin() &&
        validateStringField(request.resource.data.key, 100) &&
        validateStringField(request.resource.data.category, 50);

      allow delete: if isAdmin();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
